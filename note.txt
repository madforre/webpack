웹팩?

    웹팩(Webpack)은 기본적으로 자바스크립트 모듈 번들러 
    (JavaScript Module Bundler)이며 
    웹 개발을 도와주는 엄청나게 많은 부가 기능을 가지고 있다.

    웹팩은 기본적으로 여러 개의 자바스크립트 모듈을 하나의 파일로 묶어내는 번들러이다.

webpack 4 설치

    $ npm install --save-dev webpack webpack-cli

    또는 npm i -D webpack webpack-cli

    ( 둘다 --production 시에 빠지도록 설정 )

    webpack 4는 entrypoint와 output을 별도로 설정하지 않아도
    entry point는 ./src/index.js 파일로,
    output은 ./dist/main.js로 인지하고 번들링해준다.

npm install --save 와 --save-dev 의 차이점?

    그냥 install 하면 ./node_modules 디렉터리에 패키지 설치를 하고 끝. 
    --save, --save-dev 옵션은 ./package.json 업데이트를 같이해준다.

    어디에 패키지 정보를 추가하느냐가 다른데, --save 옵션은 dependencies object에 
    추가하고 --save-dev 옵션은 devDepenencies object에 추가한다.

    dependencies와 devDepenencies 차이는 npm install을 할 때 나타난다. 
    dependencies는 항상 설치되고 devDepenencies는 --production 옵션을 붙이면 빠진다.
    npm install “$package” 명령어로 설치할 때는 --dev 옵션을 붙여야지만 설치된다.

설정 파일

    웹팩을 사용할 때 반드시 설정 파일이 필요하지는 않지만, 
    대부분의 경우에는 설정 파일을 사용합니다. 
    왜냐하면 터미널에서 웹팩 커맨드를 실행할 때 마다 모든 옵션들을 붙여주는게 번거롭고, 
    설정 파일을 소스 저장소에 올려두면 다른 개발자들은 크게 설정을 신경쓰지 않고 
    협업을 할 수 있기 때문입니다.

    먼저 디렉토리를 만들고 NPM 프로젝트를 초기화 후, 
    웹팩과 웹팩 CLI 패키지를 설치합니다. 
    그런 다음, 웹팩에서 디폴트로 인지하는 설정 파일 이름인 webpack.config.js로 
    빈 설정 파일을 하나 만들면 초기 세팅 완료입니다.

webpack.config.js 빈 설정파일 하나 만들기.

    touch webpack.config.js (빈파일 생성)

    웹팩에서 디폴트로 인지하는 설정파일 이름이다.

    webpack.config.js 안 의 내용은 아래와 같이 작성한다.

        module.exports = {};

Entry 설정

    웹팩은 다른 모듈을 사용하고 있는 최상위 자바스크립트 파일이 어디에 있는지 알아야 한다.
    설정 파일에서 이를 Entry 속성으로 명시한다.

    Entry 설정의 기본값은 ./src/index.js이다. 웹팩 설정파일을 건드려 변경이 가능하다.

Loader 성정

    웹팩은 자바스크립트 뿐만 아니라, Loader 를 이용하여 CSS나 이미지, 웹폰트, JSX,
    VUE 등 다양한 종류의 파일을 함께 번들링 할 수 있다. 웹팩의 강력한 기능 중 하나이다.

    웹팩이 css 파일을 처리할 수 있게 만들어주는 style-loader 와 
    css-loader 패키지가 있다.

        npm i --D style-loader css-loader

        npm install --save-dev style-loader css-loader

    로더들을 설치한 후 ./src/index.js 같은 입력 파일에서 JS 파일을 import 하듯이
    CSS 파일을 import 해주자.

    마지막으로 CSS 파일이 설치한 두개의 모듈에 의해서 처리될 수 있도록
    웹팩 설정을 해주자.

        설정파일을 열어 module 속성을 추가하고, 그 안에 rules 속성을 통해
        처리 규칙을 등록한다.

        * test 항목에 정의된 정규식에 매칭되는 파일은
          use 항목에 등록된 로더를 통해서 처리되게 된다.

    이제 다시 웹팩을 실행해보자!

        npx webpack

        이제 반영될 것이다!

Plugin 설정

    플러그인을 통해서 로더로 설정이 애매한 부분들을 커버할 수 있다.
    예를 들어, 웹팩을 실행할 때 마다 기존에 있던 번들 파일을 먼저 깔끔히 지우고 
    싶은 경우에는 clean-webpack-plugin 플러그인을 사용할 수 있다.

        $ npm i -D clean-webpack-plugin

    플러그인을 사용하려면 설치한 다음, 설정 파일에 설치한 플러그인을 import한 후에, 
    plugins 속성에 import한 plugin을 추가한다.

간단 정리

    entry
    
    	입력 파일 경로.

        Entry 설정은 항상 프로젝트 디렉토리 내부이기 때문에 상대 경로로 한다.

    output	
    
        출력 디렉토리와 파일 이름.

        Output 설정은 항상 프로젝트 디렉토리 내부라는 보장이 없으므로 절대 경로로 한다.

        기본으로 dist/main.js 로 되어있다.

        Output 속성을 통해서 이 값을 다른 디렉토리와 파일로 변경할 수 있다.

    module > rules	
    
        로더 등록.

    plugins	
    
        플러그인 등록.

    __dirname은 NodeJS에서 현재 프로젝트 디렉토리를 의미

npm 설치 명령어 관련하여 정리


    명령어 npm i -S moment는 무엇인가?

        외부 라이브러리인 moment를 설치한다.
        -S 는 dependencies로, 항상 설치되게 되어있다.

    반대로 -D 는 devDepenencies로 개발환경에서만 의존하게 되어있다.
    
        ex) npm i -D (플러그인 또는 로더)
        이 친구는 --production 옵션을 붙이면 빠지게 된다.